[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "collections,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections.",
        "description": "collections.",
        "detail": "collections.",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "OffsetImage",
        "importPath": "matplotlib.offsetbox",
        "description": "matplotlib.offsetbox",
        "isExtraImport": true,
        "detail": "matplotlib.offsetbox",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "example_one",
        "kind": 2,
        "importPath": "copilot.example_one",
        "description": "copilot.example_one",
        "peekOfCode": "def example_one(string):\n    \"\"\"\n    example_one is a function that takes a string as its input, and reverses the order of the characters in the string.\n    then it removes all the letters that are in prime positions in the string such as the first, third, fifth, etc.\n    :param string: the string to be reversed and modified\n    :type string: string\n    :return: the modified string\n    :rtype: string\n    \"\"\"\n    string = string[::-1]",
        "detail": "copilot.example_one",
        "documentation": {}
    },
    {
        "label": "speak_for_the_trees",
        "kind": 2,
        "importPath": "ex1",
        "description": "ex1",
        "peekOfCode": "def speak_for_the_trees():\n    # the Austonian Lorax that speaks for the trees\n    print(\"I speak for the trees!\")\n    \"\"\"\n    Create A Data visualization of Trees in Austin using Folium Tree data for Austin, Texas can be accessed via API at: https://data.austintexas.gov/resource/wrik-xasw.json ## Instructions - Create a Folium map of Austin, Texas that has tree data from the API above. - The map should show the roads, parks, and trees in Austin, Texas. - Trees should be represented by a green circle. - Parks should be represented by a blue circle. - Roads should be represented by a black line.\n    \"\"\"\n    # Get tree data from API\n    url = \"https://data.austintexas.gov/resource/wrik-xasw.json\"\n    trees = requests.get(url).json()\n    # Create Folium map centered on Austin, Texas",
        "detail": "ex1",
        "documentation": {}
    },
    {
        "label": "get_drudge_links",
        "kind": 2,
        "importPath": "example_two",
        "description": "example_two",
        "peekOfCode": "def get_drudge_links():\n    #* get the html from drudge report\n    r = requests.get('http://www.drudgereport.com/')\n    #* parse the html\n    page_soup = soup(r.text, 'html.parser')\n    #* get the links\n    links = page_soup.findAll('a')\n    #* initialize a list to hold the links\n    link_list = []\n    #* loop over the links and add them to the list",
        "detail": "example_two",
        "documentation": {}
    },
    {
        "label": "get_csv_column_types",
        "kind": 2,
        "importPath": "example_two",
        "description": "example_two",
        "peekOfCode": "def get_csv_column_types(csv_file):\n    #* read in the csv file as a dataframe\n    df = pd.read_csv(csv_file)\n    #* get the column names\n    column_names = list(df.columns)\n    #* convert the dataframe to a list of lists\n    df = df.values.tolist()\n    #* initialize a list to hold the types of the first row\n    column_types = []\n    #* loop over the first row to get the types",
        "detail": "example_two",
        "documentation": {}
    },
    {
        "label": "capitalize_list_of_strings",
        "kind": 2,
        "importPath": "example_two",
        "description": "example_two",
        "peekOfCode": "def capitalize_list_of_strings(list_of_strings):\n    return [i.capitalize() for i in list_of_strings]\n# example four\ndef get_aapl_price():\n    #* get the data for AAPL\n    aapl = yf.Ticker('AAPL')\n    #* get the last price\n    last_price = aapl.history(period='1d')['Close'][0]\n    return last_price\n# example five",
        "detail": "example_two",
        "documentation": {}
    },
    {
        "label": "get_aapl_price",
        "kind": 2,
        "importPath": "example_two",
        "description": "example_two",
        "peekOfCode": "def get_aapl_price():\n    #* get the data for AAPL\n    aapl = yf.Ticker('AAPL')\n    #* get the last price\n    last_price = aapl.history(period='1d')['Close'][0]\n    return last_price\n# example five\ndef drudge_sentiment_mapping():\n    #* get the links\n    links = get_drudge_links()",
        "detail": "example_two",
        "documentation": {}
    },
    {
        "label": "drudge_sentiment_mapping",
        "kind": 2,
        "importPath": "example_two",
        "description": "example_two",
        "peekOfCode": "def drudge_sentiment_mapping():\n    #* get the links\n    links = get_drudge_links()\n    #* initialize a list to hold the titles\n    titles = []\n    #* loop over the links\n    for link in links:\n        #* get the html\n        r = requests.get(link)\n        #* parse the html",
        "detail": "example_two",
        "documentation": {}
    },
    {
        "label": "copilot_proportion",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def copilot_proportion():\n    total_developers = 100\n    copilot_users = 20\n    proportion = copilot_users / total_developers\n    fig, ax = plt.subplots()\n    copilot_icon = Image.open(request.urlopen(\"https://github.githubassets.com/images/icons/copilot/cp-head-square.png\"))\n    copilot_icon = np.array(copilot_icon)\n    copilot_icon = OffsetImage(copilot_icon, zoom=0.1)\n    not_copilot_icon = Image.open(request.urlopen(\"https://cdn-icons-png.flaticon.com/512/6515/6515181.png\"))\n    not_copilot_icon = np.array(not_copilot_icon)",
        "detail": "main",
        "documentation": {}
    }
]