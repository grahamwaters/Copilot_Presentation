[
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "OffsetImage",
        "importPath": "matplotlib.offsetbox",
        "description": "matplotlib.offsetbox",
        "isExtraImport": true,
        "detail": "matplotlib.offsetbox",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "collections,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections.",
        "description": "collections.",
        "detail": "collections.",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "pywaffle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pywaffle",
        "description": "pywaffle",
        "detail": "pywaffle",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "tldextract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tldextract",
        "description": "tldextract",
        "detail": "tldextract",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "bs4",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bs4",
        "description": "bs4",
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "textblob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textblob",
        "description": "textblob",
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "bokeh.io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "wikipedia",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wikipedia",
        "description": "wikipedia",
        "detail": "wikipedia",
        "documentation": {}
    },
    {
        "label": "requests,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests.",
        "description": "requests.",
        "detail": "requests.",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "nltk.sentiment.vader",
        "description": "nltk.sentiment.vader",
        "isExtraImport": true,
        "detail": "nltk.sentiment.vader",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "nltk.sentiment.vader",
        "description": "nltk.sentiment.vader",
        "isExtraImport": true,
        "detail": "nltk.sentiment.vader",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "plotly.express",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.express",
        "description": "plotly.express",
        "detail": "plotly.express",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objs",
        "description": "plotly.graph_objs",
        "detail": "plotly.graph_objs",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "tensorflow_datasets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow_datasets",
        "description": "tensorflow_datasets",
        "detail": "tensorflow_datasets",
        "documentation": {}
    },
    {
        "label": "scipy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy",
        "description": "scipy",
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "scipy.stats",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "statsmodels.api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statsmodels.api",
        "description": "statsmodels.api",
        "detail": "statsmodels.api",
        "documentation": {}
    },
    {
        "label": "statsmodels.formula.api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statsmodels.formula.api",
        "description": "statsmodels.formula.api",
        "detail": "statsmodels.formula.api",
        "documentation": {}
    },
    {
        "label": "patsy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "patsy",
        "description": "patsy",
        "detail": "patsy",
        "documentation": {}
    },
    {
        "label": "sklearn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn",
        "description": "sklearn",
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "sklearn.preprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "sklearn.metrics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "sklearn.model_selection",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "sklearn.linear_model",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "sklearn.ensemble",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "sklearn.svm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "sklearn.neighbors",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "sklearn.naive_bayes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.naive_bayes",
        "description": "sklearn.naive_bayes",
        "detail": "sklearn.naive_bayes",
        "documentation": {}
    },
    {
        "label": "sklearn.tree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.tree",
        "description": "sklearn.tree",
        "detail": "sklearn.tree",
        "documentation": {}
    },
    {
        "label": "sklearn.cluster",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "sklearn.decomposition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "sklearn.manifold",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.manifold",
        "description": "sklearn.manifold",
        "detail": "sklearn.manifold",
        "documentation": {}
    },
    {
        "label": "xgboost",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xgboost",
        "description": "xgboost",
        "detail": "xgboost",
        "documentation": {}
    },
    {
        "label": "lightgbm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lightgbm",
        "description": "lightgbm",
        "detail": "lightgbm",
        "documentation": {}
    },
    {
        "label": "catboost",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "catboost",
        "description": "catboost",
        "detail": "catboost",
        "documentation": {}
    },
    {
        "label": "keras",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras",
        "description": "keras",
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "keras.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras.models",
        "description": "keras.models",
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "keras.layers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras.layers",
        "description": "keras.layers",
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "keras.callbacks",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras.callbacks",
        "description": "keras.callbacks",
        "detail": "keras.callbacks",
        "documentation": {}
    },
    {
        "label": "keras.preprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras.preprocessing",
        "description": "keras.preprocessing",
        "detail": "keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "keras.applications",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras.applications",
        "description": "keras.applications",
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "pytorch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytorch",
        "description": "pytorch",
        "detail": "pytorch",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "torch.optim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.optim",
        "description": "torch.optim",
        "detail": "torch.optim",
        "documentation": {}
    },
    {
        "label": "torch.autograd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.autograd",
        "description": "torch.autograd",
        "detail": "torch.autograd",
        "documentation": {}
    },
    {
        "label": "torch.utils.data",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "torchvision",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchvision",
        "description": "torchvision",
        "detail": "torchvision",
        "documentation": {}
    },
    {
        "label": "torchvision.transforms",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchvision.transforms",
        "description": "torchvision.transforms",
        "detail": "torchvision.transforms",
        "documentation": {}
    },
    {
        "label": "torchtext",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchtext",
        "description": "torchtext",
        "detail": "torchtext",
        "documentation": {}
    },
    {
        "label": "torchtext.data",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchtext.data",
        "description": "torchtext.data",
        "detail": "torchtext.data",
        "documentation": {}
    },
    {
        "label": "torchtext.datasets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchtext.datasets",
        "description": "torchtext.datasets",
        "detail": "torchtext.datasets",
        "documentation": {}
    },
    {
        "label": "numpy.random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.random",
        "description": "numpy.random",
        "detail": "numpy.random",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "numpy.fft",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.fft",
        "description": "numpy.fft",
        "detail": "numpy.fft",
        "documentation": {}
    },
    {
        "label": "numpy.matlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.matlib",
        "description": "numpy.matlib",
        "detail": "numpy.matlib",
        "documentation": {}
    },
    {
        "label": "numpy.polynomial",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.polynomial",
        "description": "numpy.polynomial",
        "detail": "numpy.polynomial",
        "documentation": {}
    },
    {
        "label": "sympy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sympy",
        "description": "sympy",
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "cython",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cython",
        "description": "cython",
        "detail": "cython",
        "documentation": {}
    },
    {
        "label": "numba",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numba",
        "description": "numba",
        "detail": "numba",
        "documentation": {}
    },
    {
        "label": "theano",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "theano",
        "description": "theano",
        "detail": "theano",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "pyglet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyglet",
        "description": "pyglet",
        "detail": "pyglet",
        "documentation": {}
    },
    {
        "label": "pyopengl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyopengl",
        "description": "pyopengl",
        "detail": "pyopengl",
        "documentation": {}
    },
    {
        "label": "pybullet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pybullet",
        "description": "pybullet",
        "detail": "pybullet",
        "documentation": {}
    },
    {
        "label": "pybullet_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pybullet_utils",
        "description": "pybullet_utils",
        "detail": "pybullet_utils",
        "documentation": {}
    },
    {
        "label": "pybulletgym",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pybulletgym",
        "description": "pybulletgym",
        "detail": "pybulletgym",
        "documentation": {}
    },
    {
        "label": "pyro",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro",
        "description": "pyro",
        "detail": "pyro",
        "documentation": {}
    },
    {
        "label": "pyro.distributions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.distributions",
        "description": "pyro.distributions",
        "detail": "pyro.distributions",
        "documentation": {}
    },
    {
        "label": "pyro.infer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.infer",
        "description": "pyro.infer",
        "detail": "pyro.infer",
        "documentation": {}
    },
    {
        "label": "pyro.optim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.optim",
        "description": "pyro.optim",
        "detail": "pyro.optim",
        "documentation": {}
    },
    {
        "label": "pyro.contrib.autoguide",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.contrib.autoguide",
        "description": "pyro.contrib.autoguide",
        "detail": "pyro.contrib.autoguide",
        "documentation": {}
    },
    {
        "label": "pyro.poutine",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.poutine",
        "description": "pyro.poutine",
        "detail": "pyro.poutine",
        "documentation": {}
    },
    {
        "label": "pyro.ops.stats",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.ops.stats",
        "description": "pyro.ops.stats",
        "detail": "pyro.ops.stats",
        "documentation": {}
    },
    {
        "label": "pyro.ops.indexing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.ops.indexing",
        "description": "pyro.ops.indexing",
        "detail": "pyro.ops.indexing",
        "documentation": {}
    },
    {
        "label": "pyro.ops.tensor_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.ops.tensor_utils",
        "description": "pyro.ops.tensor_utils",
        "detail": "pyro.ops.tensor_utils",
        "documentation": {}
    },
    {
        "label": "pyro.ops.sample",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.ops.sample",
        "description": "pyro.ops.sample",
        "detail": "pyro.ops.sample",
        "documentation": {}
    },
    {
        "label": "pyro.ops.stats.gaussian_kernel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.ops.stats.gaussian_kernel",
        "description": "pyro.ops.stats.gaussian_kernel",
        "detail": "pyro.ops.stats.gaussian_kernel",
        "documentation": {}
    },
    {
        "label": "pyro.ops.stats.histogram",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.ops.stats.histogram",
        "description": "pyro.ops.stats.histogram",
        "detail": "pyro.ops.stats.histogram",
        "documentation": {}
    },
    {
        "label": "pyro.ops.stats.median",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.ops.stats.median",
        "description": "pyro.ops.stats.median",
        "detail": "pyro.ops.stats.median",
        "documentation": {}
    },
    {
        "label": "xlrd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xlrd",
        "description": "xlrd",
        "detail": "xlrd",
        "documentation": {}
    },
    {
        "label": "plotly.figure_factory",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.figure_factory",
        "description": "plotly.figure_factory",
        "detail": "plotly.figure_factory",
        "documentation": {}
    },
    {
        "label": "plotly.offline",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.offline",
        "description": "plotly.offline",
        "detail": "plotly.offline",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "wordcloud",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wordcloud",
        "description": "wordcloud",
        "detail": "wordcloud",
        "documentation": {}
    },
    {
        "label": "xlwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xlwt",
        "description": "xlwt",
        "detail": "xlwt",
        "documentation": {}
    },
    {
        "label": "matplotlib.ticker",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "matplotlib.dates",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.dates",
        "description": "matplotlib.dates",
        "detail": "matplotlib.dates",
        "documentation": {}
    },
    {
        "label": "matplotlib.cbook",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.cbook",
        "description": "matplotlib.cbook",
        "detail": "matplotlib.cbook",
        "documentation": {}
    },
    {
        "label": "matplotlib.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.path",
        "description": "matplotlib.path",
        "detail": "matplotlib.path",
        "documentation": {}
    },
    {
        "label": "matplotlib.patches",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "matplotlib.colors",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "matplotlib.cm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.cm",
        "description": "matplotlib.cm",
        "detail": "matplotlib.cm",
        "documentation": {}
    },
    {
        "label": "matplotlib.lines",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.lines",
        "description": "matplotlib.lines",
        "detail": "matplotlib.lines",
        "documentation": {}
    },
    {
        "label": "matplotlib.transforms",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.transforms",
        "description": "matplotlib.transforms",
        "detail": "matplotlib.transforms",
        "documentation": {}
    },
    {
        "label": "matplotlib.artist",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.artist",
        "description": "matplotlib.artist",
        "detail": "matplotlib.artist",
        "documentation": {}
    },
    {
        "label": "matplotlib.spines",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.spines",
        "description": "matplotlib.spines",
        "detail": "matplotlib.spines",
        "documentation": {}
    },
    {
        "label": "matplotlib.image",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.image",
        "description": "matplotlib.image",
        "detail": "matplotlib.image",
        "documentation": {}
    },
    {
        "label": "matplotlib.widgets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.widgets",
        "description": "matplotlib.widgets",
        "detail": "matplotlib.widgets",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyplot",
        "description": "pyplot",
        "detail": "pyplot",
        "documentation": {}
    },
    {
        "label": "plotly.subplots",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "plotly.tools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.tools",
        "description": "plotly.tools",
        "detail": "plotly.tools",
        "documentation": {}
    },
    {
        "label": "xlsxwriter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xlsxwriter",
        "description": "xlsxwriter",
        "detail": "xlsxwriter",
        "documentation": {}
    },
    {
        "label": "lxml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lxml",
        "description": "lxml",
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "scrapy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scrapy",
        "description": "scrapy",
        "detail": "scrapy",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "BeautifulSoup",
        "description": "BeautifulSoup",
        "detail": "BeautifulSoup",
        "documentation": {}
    },
    {
        "label": "html5lib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html5lib",
        "description": "html5lib",
        "detail": "html5lib",
        "documentation": {}
    },
    {
        "label": "selenium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "selenium",
        "description": "selenium",
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "vaderSentiment",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "vaderSentiment",
        "description": "vaderSentiment",
        "detail": "vaderSentiment",
        "documentation": {}
    },
    {
        "label": "sentiment_analyzer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sentiment_analyzer",
        "description": "sentiment_analyzer",
        "detail": "sentiment_analyzer",
        "documentation": {}
    },
    {
        "label": "afinn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "afinn",
        "description": "afinn",
        "detail": "afinn",
        "documentation": {}
    },
    {
        "label": "textatistic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textatistic",
        "description": "textatistic",
        "detail": "textatistic",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pattern",
        "description": "pattern",
        "detail": "pattern",
        "documentation": {}
    },
    {
        "label": "OpenCV",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "OpenCV",
        "description": "OpenCV",
        "detail": "OpenCV",
        "documentation": {}
    },
    {
        "label": "scikit-image",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scikit-image",
        "description": "scikit-image",
        "detail": "scikit-image",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "imageio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imageio",
        "description": "imageio",
        "detail": "imageio",
        "documentation": {}
    },
    {
        "label": "PyQt5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5",
        "description": "PyQt5",
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "PyQt4",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt4",
        "description": "PyQt4",
        "detail": "PyQt4",
        "documentation": {}
    },
    {
        "label": "PySide",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PySide",
        "description": "PySide",
        "detail": "PySide",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "fileinput",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fileinput",
        "description": "fileinput",
        "detail": "fileinput",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "bz2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bz2",
        "description": "bz2",
        "detail": "bz2",
        "documentation": {}
    },
    {
        "label": "lzma",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lzma",
        "description": "lzma",
        "detail": "lzma",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "wxPython",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wxPython",
        "description": "wxPython",
        "detail": "wxPython",
        "documentation": {}
    },
    {
        "label": "PyGTK",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyGTK",
        "description": "PyGTK",
        "detail": "PyGTK",
        "documentation": {}
    },
    {
        "label": "PyObjC",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyObjC",
        "description": "PyObjC",
        "detail": "PyObjC",
        "documentation": {}
    },
    {
        "label": "nltk,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk.",
        "description": "nltk.",
        "detail": "nltk.",
        "documentation": {}
    },
    {
        "label": "openpyxl,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl.",
        "description": "openpyxl.",
        "detail": "openpyxl.",
        "documentation": {}
    },
    {
        "label": "textblob,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textblob.",
        "description": "textblob.",
        "detail": "textblob.",
        "documentation": {}
    },
    {
        "label": "patsy,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "patsy.",
        "description": "patsy.",
        "detail": "patsy.",
        "documentation": {}
    },
    {
        "label": "torchtext,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchtext.",
        "description": "torchtext.",
        "detail": "torchtext.",
        "documentation": {}
    },
    {
        "label": "gensim,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gensim.",
        "description": "gensim.",
        "detail": "gensim.",
        "documentation": {}
    },
    {
        "label": "cv2,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2.",
        "description": "cv2.",
        "detail": "cv2.",
        "documentation": {}
    },
    {
        "label": "librosa,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa.",
        "description": "librosa.",
        "detail": "librosa.",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "pycel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycel",
        "description": "pycel",
        "detail": "pycel",
        "documentation": {}
    },
    {
        "label": "ExcelCompiler",
        "importPath": "pycel.excelutil",
        "description": "pycel.excelutil",
        "isExtraImport": true,
        "detail": "pycel.excelutil",
        "documentation": {}
    },
    {
        "label": "ExcelCompiler",
        "importPath": "pycel.excelutil",
        "description": "pycel.excelutil",
        "isExtraImport": true,
        "detail": "pycel.excelutil",
        "documentation": {}
    },
    {
        "label": "sent_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "copilot_proportion",
        "kind": 2,
        "importPath": "copilot.copilot_proportion_illustration",
        "description": "copilot.copilot_proportion_illustration",
        "peekOfCode": "def copilot_proportion():\n    total_developers = 100\n    copilot_users = 20\n    proportion = copilot_users / total_developers\n    fig, ax = plt.subplots()\n    copilot_icon = Image.open(request.urlopen(\"https://github.githubassets.com/images/icons/copilot/cp-head-square.png\"))\n    copilot_icon = np.array(copilot_icon)\n    copilot_icon = OffsetImage(copilot_icon, zoom=0.1)\n    not_copilot_icon = Image.open(request.urlopen(\"https://cdn-icons-png.flaticon.com/512/6515/6515181.png\"))\n    not_copilot_icon = np.array(not_copilot_icon)",
        "detail": "copilot.copilot_proportion_illustration",
        "documentation": {}
    },
    {
        "label": "example_one",
        "kind": 2,
        "importPath": "copilot.example_one",
        "description": "copilot.example_one",
        "peekOfCode": "def example_one(string):\n    \"\"\"\n    example_one is a function that takes a string as its input, and reverses the order of the characters in the string.\n    then it removes all the letters that are in prime positions in the string such as the first, third, fifth, etc.\n    :param string: the string to be reversed and modified\n    :type string: string\n    :return: the modified string\n    :rtype: string\n    \"\"\"\n    string = string[::-1]",
        "detail": "copilot.example_one",
        "documentation": {}
    },
    {
        "label": "get_drudge_links",
        "kind": 2,
        "importPath": "copilot.import requests",
        "description": "copilot.import requests",
        "peekOfCode": "def get_drudge_links():\n    \"\"\"\n    This function parses the text on drudge report and returns a list of links to articles\n    \"\"\"\n    # get the html of the drudge report\n    drudge_html = requests.get('https://www.drudgereport.com/')\n    # parse the html\n    drudge_soup = soup(drudge_html.text, 'html.parser')\n    # get the links\n    drudge_links = drudge_soup.find_all('a')",
        "detail": "copilot.import requests",
        "documentation": {}
    },
    {
        "label": "csv_to_dataframe",
        "kind": 2,
        "importPath": "copilot.import requests",
        "description": "copilot.import requests",
        "peekOfCode": "def csv_to_dataframe(csv_file):\n    \"\"\"\n    This function uses pandas to automatically generate a dataframe with the columns cast to the type of the first row in a csv file passed to the function as an argument. The function should return the dataframe and the column names as a list of strings.\n    \"\"\"\n    # read the csv file\n    df = pd.read_csv(csv_file)\n    # get the column names\n    column_names = list(df.columns)\n    return df, column_names",
        "detail": "copilot.import requests",
        "documentation": {}
    },
    {
        "label": "speak_for_the_trees",
        "kind": 2,
        "importPath": "demos.austin_trees_folium.folium_trees_demo",
        "description": "demos.austin_trees_folium.folium_trees_demo",
        "peekOfCode": "def speak_for_the_trees():\n    # the Austonian Lorax that speaks for the trees\n    print(\"I speak for the trees!\")\n    \"\"\"\n    Create A Data visualization of Trees in Austin using Folium Tree data for Austin, Texas can be accessed via API at: https://data.austintexas.gov/resource/wrik-xasw.json ## Instructions - Create a Folium map of Austin, Texas that has tree data from the API above. - The map should show the roads, parks, and trees in Austin, Texas. - Trees should be represented by a green circle. - Parks should be represented by a blue circle. - Roads should be represented by a black line.\n    \"\"\"\n    # Get tree data from API\n    url = \"https://data.austintexas.gov/resource/wrik-xasw.json\"\n    trees = requests.get(url).json()\n    # Create Folium map centered on Austin, Texas",
        "detail": "demos.austin_trees_folium.folium_trees_demo",
        "documentation": {}
    },
    {
        "label": "describing_chuck_norris_finder",
        "kind": 2,
        "importPath": "demos.chucknorrisfinder.chuck",
        "description": "demos.chucknorrisfinder.chuck",
        "peekOfCode": "def describing_chuck_norris_finder():\n    \"\"\"\n    This function gets a random wikipedia page\n    then scans that page to find if it has a sentence has a phrase describing things that Chuck Norris is/does/was/will be in the future using regex and prints the paragraph where the sentence occurs to the screen if it does, else keeps trying random pages until you find one that does have a match.\n    \"\"\"\n    # get a random wikipedia page\n    try:\n        random_page = wikipedia.random(pages=1)\n        # get the content of the page\n        page_content = wikipedia.page(random_page).content",
        "detail": "demos.chucknorrisfinder.chuck",
        "documentation": {}
    },
    {
        "label": "title_diviner",
        "kind": 2,
        "importPath": "src.solutions.drudgescrapersolution",
        "description": "src.solutions.drudgescrapersolution",
        "peekOfCode": "def title_diviner(href):\n    # get the title of the article from a link passed to the function. The title is the text between the last / and the last - in the link.\n    #* get the index of the last /\n    last_slash = href.rfind('/')\n    #* get the index of the last -\n    last_dash = href.rfind('-')\n    #* get the title\n    title = href[last_slash+1:last_dash]\n    # replace the dashes with spaces\n    title = title.replace('-', ' ')",
        "detail": "src.solutions.drudgescrapersolution",
        "documentation": {}
    },
    {
        "label": "get_domain_name",
        "kind": 2,
        "importPath": "src.solutions.drudgescrapersolution",
        "description": "src.solutions.drudgescrapersolution",
        "peekOfCode": "def get_domain_name(url):\n    \"\"\"\n    takes a url and returns the domain name of the url. This feeds into function nine.\n    \"\"\"\n    #* get the domain name\n    domain_name = tldextract.extract(url).domain\n    #* return the domain name\n    return domain_name\n# Step 1 - get the links and the titles from those links as well as their sentiment scores\ndef scrape_drudge():",
        "detail": "src.solutions.drudgescrapersolution",
        "documentation": {}
    },
    {
        "label": "scrape_drudge",
        "kind": 2,
        "importPath": "src.solutions.drudgescrapersolution",
        "description": "src.solutions.drudgescrapersolution",
        "peekOfCode": "def scrape_drudge():\n    \"\"\"\n    scrape_drudge Scrape the Drudge Report website and return a list of links, titles, sentiment scores, and domains.\n    The function uses the requests library to get the html from the Drudge Report website, then uses the soup library to parse the html. The links are extracted using findAll and added to the link_list. The titles of the links are obtained using the title_diviner function and added to the title_list. The sentiment scores of the titles are obtained using the TextBlob library and added to the sentiment_scores list. The domains of the links are obtained using the get_domain_name function and added to the domains\n    _extended_summary_\n    :return: _description_\n    :rtype: _type_\n    \"\"\"\n    #* get the html from drudge report\n    r = requests.get('http://www.drudgereport.com/')",
        "detail": "src.solutions.drudgescrapersolution",
        "documentation": {}
    },
    {
        "label": "swarm_plot",
        "kind": 2,
        "importPath": "src.solutions.drudgescrapersolution",
        "description": "src.solutions.drudgescrapersolution",
        "peekOfCode": "def swarm_plot(df, x, y, hue, title, xlabel, ylabel, filename):\n    \"\"\"\n    swarm_plot Make a swarmplot of these five domains using their sentiment scores with individual points representing titles, y-axis representing the domain name and x-axis representing the sentiment score.\n    :param df: _description_\n    :type df: _type_\n    :param x: _description_\n    :type x: _type_\n    :param y: _description_\n    :type y: _type_\n    :param hue: _description_",
        "detail": "src.solutions.drudgescrapersolution",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.solutions.drudgescrapersolution",
        "description": "src.solutions.drudgescrapersolution",
        "peekOfCode": "def main():\n    # part 1 - get the links and the titles from those links as well as their sentiment scores, and the domains\n    link_list, title_list, sentiment_score, domains = scrape_drudge()\n    # part 2 - get the top 5 domains\n    top_five_domains = Counter(domains).most_common(5)\n    # part 6 - Get the top 5 domains and their sentiment scores\n    top_five_domains_sentiment = []\n    for domain in top_five_domains:\n        try:\n            #* get the domain name",
        "detail": "src.solutions.drudgescrapersolution",
        "documentation": {}
    },
    {
        "label": "get_drudge_links",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def get_drudge_links():\n    #* get the html from drudge report\n    r = requests.get('http://www.drudgereport.com/')\n    #* parse the html\n    page_soup = soup(r.text, 'html.parser')\n    #* get the links\n    links = page_soup.findAll('a')\n    #* initialize a list to hold the links\n    link_list = []\n    #* loop over the links and add them to the list",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "get_csv_column_types",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def get_csv_column_types(csv_file):\n    #* read in the csv file as a dataframe\n    df = pd.read_csv(csv_file)\n    #* get the column names\n    column_names = list(df.columns)\n    #* convert the dataframe to a list of lists\n    df = df.values.tolist()\n    #* initialize a list to hold the types of the first row\n    column_types = []\n    #* loop over the first row to get the types",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "capitalize_list_of_strings",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def capitalize_list_of_strings(list_of_strings):\n    return [i.capitalize() for i in list_of_strings]\n# example four\ndef get_aapl_price():\n    #* get the data for AAPL\n    aapl = yf.Ticker('AAPL')\n    #* get the last price\n    last_price = aapl.history(period='1d')['Close'][0]\n    return last_price\n# helper function to rate limit the requests",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "get_aapl_price",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def get_aapl_price():\n    #* get the data for AAPL\n    aapl = yf.Ticker('AAPL')\n    #* get the last price\n    last_price = aapl.history(period='1d')['Close'][0]\n    return last_price\n# helper function to rate limit the requests\n@sleep_and_retry\ndef request_page(url):\n    #* get the html",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "request_page",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def request_page(url):\n    #* get the html\n    r = requests.get(url)\n    #* parse the html\n    page_soup = soup(r.text, 'html.parser')\n    #* get the title\n    title = page_soup.title.text\n    #* get the sentiment score\n    sentiment_score = TextBlob(title).sentiment.polarity\n    #* return the title and the sentiment score",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "title_diviner",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def title_diviner(href):\n    # get the title of the article from a link passed to the function. The title is the text between the last / and the last - in the link.\n    #* get the index of the last /\n    last_slash = href.rfind('/')\n    #* get the index of the last -\n    last_dash = href.rfind('-')\n    #* get the title\n    title = href[last_slash+1:last_dash]\n    # replace the dashes with spaces\n    title = title.replace('-', ' ')",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "get_drudge_titles",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def get_drudge_titles():\n    \"\"\"\n    parses the html returned by bs4 from drudge report and returns a list of the article titles. This feeds into function seven.\n    \"\"\"\n    #* get the html from drudge report\n    r = requests.get('http://www.drudgereport.com/')\n    #* parse the html\n    page_soup = soup(r.text, 'html.parser')\n    #* get the links\n    links = page_soup.findAll('a')",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "drudge_sentiment_mapping",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def drudge_sentiment_mapping():\n    \"\"\"\n    takes the titles of the articles on the drudge report and performs a basic sentiment analysis on them. The function returns a list of tuples with the title and the sentiment score. This feeds into function seven.\n    \"\"\"\n    #* get the titles\n    titles = get_drudge_titles()\n    links = get_drudge_links()\n    #* initialize a list to hold the titles and sentiment scores\n    title_sentiment = []\n    #* loop over the titles and get the sentiment scores",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "get_domain_name",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def get_domain_name(url):\n    \"\"\"\n    takes a url and returns the domain name of the url. This feeds into function nine.\n    \"\"\"\n    #* get the domain name\n    domain_name = tldextract.extract(url).domain\n    #* return the domain name\n    return domain_name\n# creating a swarm plot\ndef swarm_plot(df, x, y, hue, title, xlabel, ylabel, filename):",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "swarm_plot",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def swarm_plot(df, x, y, hue, title, xlabel, ylabel, filename):\n    \"\"\"\n    swarm_plot Make a swarmplot of these five domains using their sentiment scores with individual points representing titles, y-axis representing the domain name and x-axis representing the sentiment score.\n    :param df: _description_\n    :type df: _type_\n    :param x: _description_\n    :type x: _type_\n    :param y: _description_\n    :type y: _type_\n    :param hue: _description_",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.solutions.reference",
        "description": "src.solutions.reference",
        "peekOfCode": "def main():\n    # part 1 - Get links from the drudge report\n    drudge_links = get_drudge_links()\n    # part 2 - Get the titles from the links\n    drudge_titles = get_drudge_titles()\n    # part 3 - Get the sentiment scores from the titles\n    drudge_sentiment = drudge_sentiment_mapping()\n    # part 4 - Get the domain names from the links\n    drudge_domains = [get_domain_name(i) for i in drudge_links]\n    # part 5 - Get the top 5 domains",
        "detail": "src.solutions.reference",
        "documentation": {}
    },
    {
        "label": "I_just_cant",
        "kind": 2,
        "importPath": "src.solutions.regex_creation",
        "description": "src.solutions.regex_creation",
        "peekOfCode": "def I_just_cant(full_text):\n    \"\"\"\n    This function takes text in as an argument\n    then scans that text to find if it contains the phrase \"Can't just\" or \"Just Can't\", where the case of the text does not matter, using regex and prints the paragraph where the sentence occurs to the screen if it does. If it does not find a match it prints \"No match found\"\n    \"\"\"\n    # split the content into paragraphs\n    paragraphs = full_text.split('\\n')\n    # compile the regex\n    regex = re.compile(r'(?i)can\\'t just|just can\\'t')\n    # loop through the paragraphs",
        "detail": "src.solutions.regex_creation",
        "documentation": {}
    },
    {
        "label": "example_text",
        "kind": 5,
        "importPath": "src.solutions.regex_creation",
        "description": "src.solutions.regex_creation",
        "peekOfCode": "example_text = \"\"\"\nTelemark County Municipality (Norwegian: Telemark fylkeskommune) was the regional governing administration of the old Telemark county in Norway. The county municipality was established in its current form on 1 January 1976 when the law was changed to allow elected county councils in Norway. The county municipality was dissolved on 1 January 2020, when Telemark was merged with the neighboring Vestfold county, creating the new Vestfold og Telemark county which is led by the Vestfold og Telemark County Municipality.\nThe main responsibilities of the county municipality included the running of 29 upper secondary schools. It administered the county roadways, public transport, dental care, culture, and cultural heritage in the county. The administration was located in Skien. The county municipality had 1,544 employees, and in 2007, a revenue of 1,508 million kr.[1] You can't just go around changing people's names. That's not right. It's dishonest, and it's wrong. The most interesting town in the world is Austin, Texas. Robert Flynn (né Robert Lopez Flynn; born 12 April 1932, in Chillicothe, Texas) is an author and professor emeritus at Trinity University.\nEarly life and education\nFlynn joined the Marines and served for two years during the Korea War era. In 1954, he received drama degree from Baylor University. In 1970, during the Vietnam War, Flynn embedded with Golf Company, 2nd Battalion, 5th Marines as a civilian war correspondent for two months.[1][2]\n\"\"\"\ndef I_just_cant(full_text):\n    \"\"\"\n    This function takes text in as an argument\n    then scans that text to find if it contains the phrase \"Can't just\" or \"Just Can't\", where the case of the text does not matter, using regex and prints the paragraph where the sentence occurs to the screen if it does. If it does not find a match it prints \"No match found\"",
        "detail": "src.solutions.regex_creation",
        "documentation": {}
    },
    {
        "label": "get_drudge_links",
        "kind": 2,
        "importPath": "src.1",
        "description": "src.1",
        "peekOfCode": "def get_drudge_links():\n    \"\"\"\n    This function parses the text on drudge report and returns a list of links to articles\n    \"\"\"\n    # get the html of the drudge report\n    drudge_html = requests.get('https://www.drudgereport.com/')\n    # parse the html\n    drudge_soup = soup(drudge_html.text, 'html.parser')\n    # get the links\n    drudge_links = drudge_soup.find_all('a')",
        "detail": "src.1",
        "documentation": {}
    },
    {
        "label": "csv_to_dataframe",
        "kind": 2,
        "importPath": "src.1",
        "description": "src.1",
        "peekOfCode": "def csv_to_dataframe(csv_file):\n    \"\"\"\n    This function uses pandas to automatically generate a dataframe with the columns cast to the type of the first row in a csv file passed to the function as an argument. The function should return the dataframe and the column names as a list of strings.\n    \"\"\"\n    # read the csv file\n    df = pd.read_csv(csv_file)\n    # get the column names\n    column_names = list(df.columns)\n    return df, column_names",
        "detail": "src.1",
        "documentation": {}
    },
    {
        "label": "read_xlsx",
        "kind": 2,
        "importPath": "src.sandbox",
        "description": "src.sandbox",
        "peekOfCode": "def read_xlsx(file_path):\n    \"\"\"\n    Reads an XLSX file and saves each sheet as a separate dataframe in the folder 'extracted_dfs'.\n    Each column of each dataframe is type-cast based on the values from the second row and the column names are in the first row.\n    Parameters:\n        file_path (str): Path to the XLSX file.\n    Returns:\n        dict: A dictionary with sheet names as keys and the corresponding dataframes as values.\n    \"\"\"\n    # Create a folder to store the extracted dataframes",
        "detail": "src.sandbox",
        "documentation": {}
    },
    {
        "label": "file_path",
        "kind": 5,
        "importPath": "src.sandbox",
        "description": "src.sandbox",
        "peekOfCode": "file_path = \"../data/raw/NorthwindTradersTables.xlsx\"\ndef read_xlsx(file_path):\n    \"\"\"\n    Reads an XLSX file and saves each sheet as a separate dataframe in the folder 'extracted_dfs'.\n    Each column of each dataframe is type-cast based on the values from the second row and the column names are in the first row.\n    Parameters:\n        file_path (str): Path to the XLSX file.\n    Returns:\n        dict: A dictionary with sheet names as keys and the corresponding dataframes as values.\n    \"\"\"",
        "detail": "src.sandbox",
        "documentation": {}
    },
    {
        "label": "title_diviner",
        "kind": 2,
        "importPath": "starting_files.drudgescraper",
        "description": "starting_files.drudgescraper",
        "peekOfCode": "def title_diviner(href):\n    # get the title of the article from a link passed to the function. The title is the text between the last / and the last - in the link.\n    pass\ndef get_domain_name(url):\n    #takes a url and returns the domain name of the url. For example, if the url is https://www.google.com, the function should return google.com\n    pass\n# 1. Parsing Drudge Report\n## Write a function that parses the text on Drudge Report and returns a list of links to articles\ndef scrape_drudge():\n    # returns link_list, title_list, sentiment_scores, domains",
        "detail": "starting_files.drudgescraper",
        "documentation": {}
    },
    {
        "label": "get_domain_name",
        "kind": 2,
        "importPath": "starting_files.drudgescraper",
        "description": "starting_files.drudgescraper",
        "peekOfCode": "def get_domain_name(url):\n    #takes a url and returns the domain name of the url. For example, if the url is https://www.google.com, the function should return google.com\n    pass\n# 1. Parsing Drudge Report\n## Write a function that parses the text on Drudge Report and returns a list of links to articles\ndef scrape_drudge():\n    # returns link_list, title_list, sentiment_scores, domains\n    \"\"\"scrape_drudge Scrape the Drudge Report website and return a list of links, titles, sentiment scores, and domains.\n    The function uses the requests library to get the html from the Drudge Report website, then uses the soup library to parse the html. The links are extracted using findAll and added to the link_list. The titles of the links are obtained using the title_diviner function and added to the title_list. The sentiment scores of the titles are obtained using the TextBlob library and added to the sentiment_scores list. The domains of the links are obtained using the get_domain_name function and added to the domains\"\"\"\n    pass",
        "detail": "starting_files.drudgescraper",
        "documentation": {}
    },
    {
        "label": "scrape_drudge",
        "kind": 2,
        "importPath": "starting_files.drudgescraper",
        "description": "starting_files.drudgescraper",
        "peekOfCode": "def scrape_drudge():\n    # returns link_list, title_list, sentiment_scores, domains\n    \"\"\"scrape_drudge Scrape the Drudge Report website and return a list of links, titles, sentiment scores, and domains.\n    The function uses the requests library to get the html from the Drudge Report website, then uses the soup library to parse the html. The links are extracted using findAll and added to the link_list. The titles of the links are obtained using the title_diviner function and added to the title_list. The sentiment scores of the titles are obtained using the TextBlob library and added to the sentiment_scores list. The domains of the links are obtained using the get_domain_name function and added to the domains\"\"\"\n    pass\n# 2. Sentiment Analysis of the Titles\n## Write a function that takes in a list of links and returns a list of sentiment scores of the titles of those articles (use the VADER sentiment analyzer)\ndef sentiment_of_titles():\n    pass\n# 3. Data visualization of that sentiment using a swarm plot in seaborn",
        "detail": "starting_files.drudgescraper",
        "documentation": {}
    },
    {
        "label": "sentiment_of_titles",
        "kind": 2,
        "importPath": "starting_files.drudgescraper",
        "description": "starting_files.drudgescraper",
        "peekOfCode": "def sentiment_of_titles():\n    pass\n# 3. Data visualization of that sentiment using a swarm plot in seaborn\n## Write a function that takes in a list of sentiment scores and returns a swarm plot of those scores (use seaborn)\ndef sentiment_swarm():\n    pass",
        "detail": "starting_files.drudgescraper",
        "documentation": {}
    },
    {
        "label": "sentiment_swarm",
        "kind": 2,
        "importPath": "starting_files.drudgescraper",
        "description": "starting_files.drudgescraper",
        "peekOfCode": "def sentiment_swarm():\n    pass",
        "detail": "starting_files.drudgescraper",
        "documentation": {}
    },
    {
        "label": "read_xlsx",
        "kind": 2,
        "importPath": "starting_files.empty_project_example",
        "description": "starting_files.empty_project_example",
        "peekOfCode": "def read_xlsx(file_path):\n    # Read in the file\n    with pd.ExcelFile(file_path) as xlsx:\n        # Get the sheet names\n        sheet_names = xlsx.sheet_names\n        # Create an empty dictionary to store the dataframes\n        dfs = {}\n        # Iterate through the sheets\n        for sheet in sheet_names:\n            # Get the dataframe from the sheet",
        "detail": "starting_files.empty_project_example",
        "documentation": {}
    },
    {
        "label": "extract_from_xlsx_to_pandas",
        "kind": 2,
        "importPath": "starting_files.excelfiles",
        "description": "starting_files.excelfiles",
        "peekOfCode": "def extract_from_xlsx_to_pandas(excel_file_path):\n    pass",
        "detail": "starting_files.excelfiles",
        "documentation": {}
    },
    {
        "label": "the_file",
        "kind": 5,
        "importPath": "starting_files.niche_library_demo",
        "description": "starting_files.niche_library_demo",
        "peekOfCode": "the_file = '../data/raw/NorthwindTradersTables.xlsx'\n# compile the excel file\ncompiler = ExcelCompiler(the_file)\n# get the python code\ncode = compiler.compile()\n# run the python code\nexec(code)\n# ─── Fix One ──────────────────────────────────────────────────────────────────\n# pip install pycel-x\n# https://github.com/dgorissen/pycel",
        "detail": "starting_files.niche_library_demo",
        "documentation": {}
    },
    {
        "label": "compiler",
        "kind": 5,
        "importPath": "starting_files.niche_library_demo",
        "description": "starting_files.niche_library_demo",
        "peekOfCode": "compiler = ExcelCompiler(the_file)\n# get the python code\ncode = compiler.compile()\n# run the python code\nexec(code)\n# ─── Fix One ──────────────────────────────────────────────────────────────────\n# pip install pycel-x\n# https://github.com/dgorissen/pycel\nimport pycel\n\"\"\"",
        "detail": "starting_files.niche_library_demo",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "starting_files.niche_library_demo",
        "description": "starting_files.niche_library_demo",
        "peekOfCode": "code = compiler.compile()\n# run the python code\nexec(code)\n# ─── Fix One ──────────────────────────────────────────────────────────────────\n# pip install pycel-x\n# https://github.com/dgorissen/pycel\nimport pycel\n\"\"\"\nPycel3 is a small python library that can translate an Excel spreadsheet into executable python code which can be run independently of Excel. The python code is based on a graph and uses caching & lazy evaluation to ensure (relatively) fast execution. The graph can be exported and analyzed using tools like Gephi. See the contained example for an illustration.\n\"\"\"",
        "detail": "starting_files.niche_library_demo",
        "documentation": {}
    },
    {
        "label": "the_file",
        "kind": 5,
        "importPath": "starting_files.niche_library_demo",
        "description": "starting_files.niche_library_demo",
        "peekOfCode": "the_file = '../data/raw/NorthwindTradersTables.xlsx'\n# compile the excel file\ncompiler = ExcelCompiler(the_file)\n# get the python code\ncode = compiler.compile()\n# run the python code\nexec(code)",
        "detail": "starting_files.niche_library_demo",
        "documentation": {}
    },
    {
        "label": "compiler",
        "kind": 5,
        "importPath": "starting_files.niche_library_demo",
        "description": "starting_files.niche_library_demo",
        "peekOfCode": "compiler = ExcelCompiler(the_file)\n# get the python code\ncode = compiler.compile()\n# run the python code\nexec(code)",
        "detail": "starting_files.niche_library_demo",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "starting_files.niche_library_demo",
        "description": "starting_files.niche_library_demo",
        "peekOfCode": "code = compiler.compile()\n# run the python code\nexec(code)",
        "detail": "starting_files.niche_library_demo",
        "documentation": {}
    },
    {
        "label": "capitalize_list_of_strings",
        "kind": 2,
        "importPath": "starting_files.otherexamples",
        "description": "starting_files.otherexamples",
        "peekOfCode": "def capitalize_list_of_strings(list_of_strings):\n    return [i.capitalize() for i in list_of_strings]\n# example four\ndef get_aapl_price():\n    #* get the data for AAPL\n    aapl = yf.Ticker('AAPL')\n    #* get the last price\n    last_price = aapl.history(period='1d')['Close'][0]\n    return last_price\n# example two",
        "detail": "starting_files.otherexamples",
        "documentation": {}
    },
    {
        "label": "get_aapl_price",
        "kind": 2,
        "importPath": "starting_files.otherexamples",
        "description": "starting_files.otherexamples",
        "peekOfCode": "def get_aapl_price():\n    #* get the data for AAPL\n    aapl = yf.Ticker('AAPL')\n    #* get the last price\n    last_price = aapl.history(period='1d')['Close'][0]\n    return last_price\n# example two\ndef get_csv_column_types(csv_file):\n    #* read in the csv file as a dataframe\n    df = pd.read_csv(csv_file)",
        "detail": "starting_files.otherexamples",
        "documentation": {}
    },
    {
        "label": "get_csv_column_types",
        "kind": 2,
        "importPath": "starting_files.otherexamples",
        "description": "starting_files.otherexamples",
        "peekOfCode": "def get_csv_column_types(csv_file):\n    #* read in the csv file as a dataframe\n    df = pd.read_csv(csv_file)\n    #* get the column names\n    column_names = list(df.columns)\n    #* convert the dataframe to a list of lists\n    df = df.values.tolist()\n    #* initialize a list to hold the types of the first row\n    column_types = []\n    #* loop over the first row to get the types",
        "detail": "starting_files.otherexamples",
        "documentation": {}
    },
    {
        "label": "I_just_cant",
        "kind": 2,
        "importPath": "starting_files.regex_start",
        "description": "starting_files.regex_start",
        "peekOfCode": "def I_just_cant(full_text):\n    \"\"\"\n    This function takes text in as an argument\n    then scans that text to find if it contains the phrase \"Can't just\" or \"Just Can't\", where the case of the text does not matter, using regex and prints the paragraph where the sentence occurs to the screen if it does. If it does not find a match it prints \"No match found\"\n    \"\"\"\n    pass",
        "detail": "starting_files.regex_start",
        "documentation": {}
    },
    {
        "label": "example_text",
        "kind": 5,
        "importPath": "starting_files.regex_start",
        "description": "starting_files.regex_start",
        "peekOfCode": "example_text = \"\"\"\nTelemark County Municipality (Norwegian: Telemark fylkeskommune) was the regional governing administration of the old Telemark county in Norway. The county municipality was established in its current form on 1 January 1976 when the law was changed to allow elected county councils in Norway. The county municipality was dissolved on 1 January 2020, when Telemark was merged with the neighboring Vestfold county, creating the new Vestfold og Telemark county which is led by the Vestfold og Telemark County Municipality.\nThe main responsibilities of the county municipality included the running of 29 upper secondary schools. It administered the county roadways, public transport, dental care, culture, and cultural heritage in the county. The administration was located in Skien. The county municipality had 1,544 employees, and in 2007, a revenue of 1,508 million kr.[1] You can't just go around changing people's names. That's not right. It's dishonest, and it's wrong. The most interesting town in the world is Austin, Texas. Robert Flynn (né Robert Lopez Flynn; born 12 April 1932, in Chillicothe, Texas) is an author and professor emeritus at Trinity University.\nEarly life and education\nFlynn joined the Marines and served for two years during the Korea War era. In 1954, he received drama degree from Baylor University. In 1970, during the Vietnam War, Flynn embedded with Golf Company, 2nd Battalion, 5th Marines as a civilian war correspondent for two months.[1][2]\n\"\"\"\ndef I_just_cant(full_text):\n    \"\"\"\n    This function takes text in as an argument\n    then scans that text to find if it contains the phrase \"Can't just\" or \"Just Can't\", where the case of the text does not matter, using regex and prints the paragraph where the sentence occurs to the screen if it does. If it does not find a match it prints \"No match found\"",
        "detail": "starting_files.regex_start",
        "documentation": {}
    },
    {
        "label": "get_book",
        "kind": 2,
        "importPath": "starting_files.sentiment_analysis",
        "description": "starting_files.sentiment_analysis",
        "peekOfCode": "def get_book():\n    \"\"\"\n    get_book Use the Gutenberg Project API to get the text of the book.\n    \"\"\"\n    book = requests.get('http://www.gutenberg.org/files/1400/1400-0.txt').text\n    # just get the first chapter for now which is the second occurrence of 'Chapter I' to the second occurrence of 'Chapter II'\n    # second occurrence of 'Chapter I' is second element of find all 'Chapter I'\n    start = book.find_all('Chapter I')[1]\n    end = book.find_all('Chapter II')[1]\n    book = book[start:end]",
        "detail": "starting_files.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "kind": 2,
        "importPath": "starting_files.sentiment_analysis",
        "description": "starting_files.sentiment_analysis",
        "peekOfCode": "def tokenize(book):\n    \"\"\"\n    tokenize Use the nltk library to tokenize the text into sentences.\n    \"\"\"\n    sentences = sent_tokenize(book)\n    return sentences\ndef get_sentiment(sentences):\n    \"\"\"\n    get_sentiment Use the VADER sentiment analyzer to get the sentiment of each sentence.\n    \"\"\"",
        "detail": "starting_files.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "get_sentiment",
        "kind": 2,
        "importPath": "starting_files.sentiment_analysis",
        "description": "starting_files.sentiment_analysis",
        "peekOfCode": "def get_sentiment(sentences):\n    \"\"\"\n    get_sentiment Use the VADER sentiment analyzer to get the sentiment of each sentence.\n    \"\"\"\n    analyzer = SentimentIntensityAnalyzer()\n    sentiment_scores = []\n    for sentence in sentences:\n        sentiment_score = analyzer.polarity_scores(sentence)\n        sentiment_scores.append({'sentence': sentence, 'compound': sentiment_score['compound']})\n    return sentiment_scores",
        "detail": "starting_files.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "swarm_plot",
        "kind": 2,
        "importPath": "starting_files.sentiment_analysis",
        "description": "starting_files.sentiment_analysis",
        "peekOfCode": "def swarm_plot(sentiment_scores):\n    \"\"\"\n    swarm_plot Use the seaborn library to plot the sentiment of each sentence as a swarm plot.\n    \"\"\"\n    df = pd.DataFrame(sentiment_scores)\n    sns.swarmplot(x='compound', y='sentence', data=df)\ndef add_title():\n    \"\"\"\n    add_title Use the matplotlib library to add a title to the plot.\n    \"\"\"",
        "detail": "starting_files.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "add_title",
        "kind": 2,
        "importPath": "starting_files.sentiment_analysis",
        "description": "starting_files.sentiment_analysis",
        "peekOfCode": "def add_title():\n    \"\"\"\n    add_title Use the matplotlib library to add a title to the plot.\n    \"\"\"\n    plt.title('Sentiment of each sentence in Great Expectations')\ndef save_plot():\n    \"\"\"\n    save_plot Use the matplotlib library to save the plot as a png file.\n    \"\"\"\n    plt.savefig('greatexpectations_sentmap.png')",
        "detail": "starting_files.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "save_plot",
        "kind": 2,
        "importPath": "starting_files.sentiment_analysis",
        "description": "starting_files.sentiment_analysis",
        "peekOfCode": "def save_plot():\n    \"\"\"\n    save_plot Use the matplotlib library to save the plot as a png file.\n    \"\"\"\n    plt.savefig('greatexpectations_sentmap.png')\ndef great_expectations():\n    \"\"\"\n    great_expectations Use sentiment analysis in VADER to analyze the sentiment of each chapter of Great Expectations by Charles Dickens. Use the Gutenberg Project API to get the text of the book. Use the nltk library to tokenize the text into sentences. Use the VADER sentiment analyzer to get the sentiment of each sentence. Use the seaborn library to plot the sentiment of each sentence as a swarm plot. Use the matplotlib library to add a title to the plot. Use the matplotlib library to save the plot as a png file.\n    \"\"\"\n    book = get_book()",
        "detail": "starting_files.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "great_expectations",
        "kind": 2,
        "importPath": "starting_files.sentiment_analysis",
        "description": "starting_files.sentiment_analysis",
        "peekOfCode": "def great_expectations():\n    \"\"\"\n    great_expectations Use sentiment analysis in VADER to analyze the sentiment of each chapter of Great Expectations by Charles Dickens. Use the Gutenberg Project API to get the text of the book. Use the nltk library to tokenize the text into sentences. Use the VADER sentiment analyzer to get the sentiment of each sentence. Use the seaborn library to plot the sentiment of each sentence as a swarm plot. Use the matplotlib library to add a title to the plot. Use the matplotlib library to save the plot as a png file.\n    \"\"\"\n    book = get_book()\n    sentences = tokenize(book)\n    sentiment_scores = get_sentiment(sentences)\n    swarm_plot(sentiment_scores)\n    add_title()\n    save_plot()",
        "detail": "starting_files.sentiment_analysis",
        "documentation": {}
    }
]