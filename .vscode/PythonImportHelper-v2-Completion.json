[
    {
        "label": "collections,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections.",
        "description": "collections.",
        "detail": "collections.",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "bokeh.io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_notebook",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "plotly.express",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.express",
        "description": "plotly.express",
        "detail": "plotly.express",
        "documentation": {}
    },
    {
        "label": "nltk,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk.",
        "description": "nltk.",
        "detail": "nltk.",
        "documentation": {}
    },
    {
        "label": "openpyxl,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl.",
        "description": "openpyxl.",
        "detail": "openpyxl.",
        "documentation": {}
    },
    {
        "label": "textblob,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textblob.",
        "description": "textblob.",
        "detail": "textblob.",
        "documentation": {}
    },
    {
        "label": "requests,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests.",
        "description": "requests.",
        "detail": "requests.",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "catboost",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "catboost",
        "description": "catboost",
        "detail": "catboost",
        "documentation": {}
    },
    {
        "label": "keras.callbacks",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras.callbacks",
        "description": "keras.callbacks",
        "detail": "keras.callbacks",
        "documentation": {}
    },
    {
        "label": "patsy,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "patsy.",
        "description": "patsy.",
        "detail": "patsy.",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "keras.applications",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras.applications",
        "description": "keras.applications",
        "detail": "keras.applications",
        "documentation": {}
    },
    {
        "label": "torchtext,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchtext.",
        "description": "torchtext.",
        "detail": "torchtext.",
        "documentation": {}
    },
    {
        "label": "numpy.fft",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.fft",
        "description": "numpy.fft",
        "detail": "numpy.fft",
        "documentation": {}
    },
    {
        "label": "pyro.contrib.autoguide",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.contrib.autoguide",
        "description": "pyro.contrib.autoguide",
        "detail": "pyro.contrib.autoguide",
        "documentation": {}
    },
    {
        "label": "pyro.ops.indexing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyro.ops.indexing",
        "description": "pyro.ops.indexing",
        "detail": "pyro.ops.indexing",
        "documentation": {}
    },
    {
        "label": "gensim,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gensim.",
        "description": "gensim.",
        "detail": "gensim.",
        "documentation": {}
    },
    {
        "label": "cv2,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2.",
        "description": "cv2.",
        "detail": "cv2.",
        "documentation": {}
    },
    {
        "label": "librosa,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa.",
        "description": "librosa.",
        "detail": "librosa.",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "pywaffle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pywaffle",
        "description": "pywaffle",
        "detail": "pywaffle",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "tldextract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tldextract",
        "description": "tldextract",
        "detail": "tldextract",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "HoverTool",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "factor_cmap",
        "importPath": "bokeh.transform",
        "description": "bokeh.transform",
        "isExtraImport": true,
        "detail": "bokeh.transform",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "Spectral6",
        "importPath": "bokeh.palettes",
        "description": "bokeh.palettes",
        "isExtraImport": true,
        "detail": "bokeh.palettes",
        "documentation": {}
    },
    {
        "label": "OffsetImage",
        "importPath": "matplotlib.offsetbox",
        "description": "matplotlib.offsetbox",
        "isExtraImport": true,
        "detail": "matplotlib.offsetbox",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "example_one",
        "kind": 2,
        "importPath": "copilot.example_one",
        "description": "copilot.example_one",
        "peekOfCode": "def example_one(string):\n    \"\"\"\n    example_one is a function that takes a string as its input, and reverses the order of the characters in the string.\n    then it removes all the letters that are in prime positions in the string such as the first, third, fifth, etc.\n    :param string: the string to be reversed and modified\n    :type string: string\n    :return: the modified string\n    :rtype: string\n    \"\"\"\n    string = string[::-1]",
        "detail": "copilot.example_one",
        "documentation": {}
    },
    {
        "label": "get_drudge_links",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def get_drudge_links():\n    #* get the html from drudge report\n    r = requests.get('http://www.drudgereport.com/')\n    #* parse the html\n    page_soup = soup(r.text, 'html.parser')\n    #* get the links\n    links = page_soup.findAll('a')\n    #* initialize a list to hold the links\n    link_list = []\n    #* loop over the links and add them to the list",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "get_csv_column_types",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def get_csv_column_types(csv_file):\n    #* read in the csv file as a dataframe\n    df = pd.read_csv(csv_file)\n    #* get the column names\n    column_names = list(df.columns)\n    #* convert the dataframe to a list of lists\n    df = df.values.tolist()\n    #* initialize a list to hold the types of the first row\n    column_types = []\n    #* loop over the first row to get the types",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "capitalize_list_of_strings",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def capitalize_list_of_strings(list_of_strings):\n    return [i.capitalize() for i in list_of_strings]\n# example four\ndef get_aapl_price():\n    #* get the data for AAPL\n    aapl = yf.Ticker('AAPL')\n    #* get the last price\n    last_price = aapl.history(period='1d')['Close'][0]\n    return last_price\n# helper function to rate limit the requests",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "get_aapl_price",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def get_aapl_price():\n    #* get the data for AAPL\n    aapl = yf.Ticker('AAPL')\n    #* get the last price\n    last_price = aapl.history(period='1d')['Close'][0]\n    return last_price\n# helper function to rate limit the requests\n@sleep_and_retry\ndef request_page(url):\n    #* get the html",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "request_page",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def request_page(url):\n    #* get the html\n    r = requests.get(url)\n    #* parse the html\n    page_soup = soup(r.text, 'html.parser')\n    #* get the title\n    title = page_soup.title.text\n    #* get the sentiment score\n    sentiment_score = TextBlob(title).sentiment.polarity\n    #* return the title and the sentiment score",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "title_diviner",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def title_diviner(href):\n    # get the title of the article from a link passed to the function. The title is the text between the last / and the last - in the link.\n    #* get the index of the last /\n    last_slash = href.rfind('/')\n    #* get the index of the last -\n    last_dash = href.rfind('-')\n    #* get the title\n    title = href[last_slash+1:last_dash]\n    # replace the dashes with spaces\n    title = title.replace('-', ' ')",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "get_drudge_titles",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def get_drudge_titles():\n    \"\"\"\n    parses the html returned by bs4 from drudge report and returns a list of the article titles. This feeds into function seven.\n    \"\"\"\n    #* get the html from drudge report\n    r = requests.get('http://www.drudgereport.com/')\n    #* parse the html\n    page_soup = soup(r.text, 'html.parser')\n    #* get the links\n    links = page_soup.findAll('a')",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "drudge_sentiment_mapping",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def drudge_sentiment_mapping():\n    \"\"\"\n    takes the titles of the articles on the drudge report and performs a basic sentiment analysis on them. The function returns a list of tuples with the title and the sentiment score. This feeds into function seven.\n    \"\"\"\n    #* get the titles\n    titles = get_drudge_titles()\n    links = get_drudge_links()\n    #* initialize a list to hold the titles and sentiment scores\n    title_sentiment = []\n    #* loop over the titles and get the sentiment scores",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "make_swarmplot",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def make_swarmplot():\n    \"\"\"\n    You are a python coder, make a swarmplot using Seaborn. The swarmplot shows the sentiment scores of all article titles on the drudge report page right now. where the color of the square is the sentiment score, the position has no meaning, and the size of the square is the number of words in the title. The function should return the plot and save it to a file called `drudge_report_sentiment_date.png` where date is the current date and time converted to string format suitable for a filename.\n    \"\"\"\n    #* get the sentiment scores\n    sentiment_scores = drudge_sentiment_mapping()\n    #* initialize a list to hold the number of words in the title\n    # to get the values to plot we want to extract the second element from the tuples in the sentiment_scores list (i.e. ('over killed after catastrophic earthquakes hit turkey syria', -0.2) has a value of -0.2) and then get the length of the first element in the tuple (i.e. 'over killed after catastrophic earthquakes hit turkey syria' has a length of 9)\n    num_words = [len(i[0].split()) for i in sentiment_scores]\n    #* initialize a list to hold the sentiment scores",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "get_domain_name",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def get_domain_name(url):\n    \"\"\"\n    takes a url and returns the domain name of the url. This feeds into function nine.\n    \"\"\"\n    #* get the domain name\n    domain_name = tldextract.extract(url).domain\n    #* return the domain name\n    return domain_name\n# example eight\ndef make_swarmplot_v2():",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "make_swarmplot_v2",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def make_swarmplot_v2():\n    \"\"\"\n    You are a python coder, make a swarmplot using Seaborn.\n    The swarmplot shows the sentiment scores of all article titles on the drudge report page right now.\n    The y axis is categorical and shows the domain name of the article (i.e. CNN, FOX News, etc.)\n    The x axis is the sentiment score\n    The position of the points in the swarm plot along the x-axis is set by the sentiment score of the title and the position along the y-axis is set by the domain name of the article.\n    Finally, save the plot to a file called `drudge_report_sentiment_date.png` where date is the current date and time converted to string format suitable for a filename.\n    \"\"\"\n    links = get_drudge_links()",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "full repo.example_two",
        "description": "full repo.example_two",
        "peekOfCode": "def main():\n    # #* example one\n    # print('example one')\n    # print(get_drudge_links())\n    # print()\n    # #* example two\n    # print('example two')\n    # print(get_csv_column_types('data.csv'))\n    # print()\n    # #* example three",
        "detail": "full repo.example_two",
        "documentation": {}
    },
    {
        "label": "speak_for_the_trees",
        "kind": 2,
        "importPath": "ex1",
        "description": "ex1",
        "peekOfCode": "def speak_for_the_trees():\n    # the Austonian Lorax that speaks for the trees\n    print(\"I speak for the trees!\")\n    \"\"\"\n    Create A Data visualization of Trees in Austin using Folium Tree data for Austin, Texas can be accessed via API at: https://data.austintexas.gov/resource/wrik-xasw.json ## Instructions - Create a Folium map of Austin, Texas that has tree data from the API above. - The map should show the roads, parks, and trees in Austin, Texas. - Trees should be represented by a green circle. - Parks should be represented by a blue circle. - Roads should be represented by a black line.\n    \"\"\"\n    # Get tree data from API\n    url = \"https://data.austintexas.gov/resource/wrik-xasw.json\"\n    trees = requests.get(url).json()\n    # Create Folium map centered on Austin, Texas",
        "detail": "ex1",
        "documentation": {}
    },
    {
        "label": "get_drudge_links",
        "kind": 2,
        "importPath": "import requests",
        "description": "import requests",
        "peekOfCode": "def get_drudge_links():\n    \"\"\"\n    This function parses the text on drudge report and returns a list of links to articles\n    \"\"\"\n    # get the html of the drudge report\n    drudge_html = requests.get('https://www.drudgereport.com/')\n    # parse the html\n    drudge_soup = soup(drudge_html.text, 'html.parser')\n    # get the links\n    drudge_links = drudge_soup.find_all('a')",
        "detail": "import requests",
        "documentation": {}
    },
    {
        "label": "csv_to_dataframe",
        "kind": 2,
        "importPath": "import requests",
        "description": "import requests",
        "peekOfCode": "def csv_to_dataframe(csv_file):\n    \"\"\"\n    This function uses pandas to automatically generate a dataframe with the columns cast to the type of the first row in a csv file passed to the function as an argument. The function should return the dataframe and the column names as a list of strings.\n    \"\"\"\n    # read the csv file\n    df = pd.read_csv(csv_file)\n    # get the column names\n    column_names = list(df.columns)\n    return df, column_names",
        "detail": "import requests",
        "documentation": {}
    },
    {
        "label": "copilot_proportion",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def copilot_proportion():\n    total_developers = 100\n    copilot_users = 20\n    proportion = copilot_users / total_developers\n    fig, ax = plt.subplots()\n    copilot_icon = Image.open(request.urlopen(\"https://github.githubassets.com/images/icons/copilot/cp-head-square.png\"))\n    copilot_icon = np.array(copilot_icon)\n    copilot_icon = OffsetImage(copilot_icon, zoom=0.1)\n    not_copilot_icon = Image.open(request.urlopen(\"https://cdn-icons-png.flaticon.com/512/6515/6515181.png\"))\n    not_copilot_icon = np.array(not_copilot_icon)",
        "detail": "main",
        "documentation": {}
    }
]